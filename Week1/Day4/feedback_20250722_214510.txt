URL: https://github.com/alexandra-gofman/DI-Bootcamp/blob/main/Week1/Day4/Exercises_XP.py
suggestions for improvement:
- In Exercise 1, while the code correctly uses sets and set operations, it doesn't explicitly demonstrate adding and removing items as instructed.  The instructions say to remove the *last* number added, but this isn't tracked.
- Exercise 4 could be improved by using a more concise method for generating the float sequence (like list comprehension).
- Exercise 6's loop termination condition could be more readable by using a `break` statement instead of a flag variable.
- In Exercise 10, the removal of 'Pastrami' could be simplified using a `while` loop that directly checks for its presence.  The code also unnecessarily creates `finished_sandwiches`; it could append directly to the original list and print from it.
- Add comments to explain the logic in various parts of the code, especially in more complex loops or operations.
Brief justification:
- correctness: The code generally addresses the exercises correctly, demonstrating use of sets, tuples, lists, loops, and conditional statements as outlined in the chapter content.  However, some minor deviations exist (see feedback) where the code's implementation doesn't precisely follow the instructions in terms of method or order of operations.  For example, Exercise 1 lacks the explicit addition and removal steps as requested, and Exercise 10 is overly complex.
- readability: The code is mostly readable.  Variable names are generally descriptive.  However, some improvements could be made to simplify the code's structure and logic in a few places. For example, Exercise 6 and 10 could be structured more simply (see feedback).
- performance: The code's performance is generally good.  The algorithms are relatively straightforward and efficient.  In a few cases, there is a minor redundancy or inefficiency. The improved suggestions above aim to address that.  For instance, Exercise 10 could be made more efficient by directly appending to the original list.
- security: The code doesn't introduce any known security vulnerabilities.  It's primarily focused on basic data structures and operations and does not interact with external resources or user input in a way that could be exploited.

